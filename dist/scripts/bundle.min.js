// wrap in an IIFE to remove variables from global scope
(function() {
  "use strict";
  
  angular
    .module("folioApp", ["ui.router", "responsive-images"]) // eslint-disable-line no-undef
    .config(function(
      $stateProvider,
      $urlRouterProvider,
      $compileProvider,
      $locationProvider
    ) {
      $compileProvider.debugInfoEnabled(false);

      $stateProvider
        .state("developer", {
          url: "/developer",
          templateUrl: "templates/main/developer.html",
          controller: "DeveloperController"
        })
        .state("photographer", {
          url: "/photographer",
          templateUrl: "templates/main/photographer.html",
          controller: "PhotographerController"
        })
        .state("vera-photoshoot", {
          url: "/vera-photoshoot",
          templateUrl: "templates/photoshoots/vera-photoshoot.html",
          controller: "PhotographerController"
        })
        .state("skillset", {
          url: "/skillset",
          templateUrl: "templates/projects/skillset.html",
          controller: "DeveloperController"
        })
        .state("etude", {
          url: "/etude",
          templateUrl: "templates/projects/etude.html",
          controller: "DeveloperController"
        })
        .state("reponotes", {
          url: "/reponotes",
          templateUrl: "templates/projects/reponotes.html",
          controller: "DeveloperController"
        })
        .state("tfstoolset", {
          url: "/tfstoolset",
          templateUrl: "templates/projects/tfstoolset.html",
          controller: "DeveloperController"
        });

      $urlRouterProvider.otherwise("/developer");
    });
})();

(function() {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioApp")
    .controller("DeveloperController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "developer";

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // page specific objects
        $scope.developerHeadshot = {
          url: "https://avatars3.githubusercontent.com/u/1449455?s=460&v=4",
          alt: "developer headshot"
        };

        $scope.softwareHeaderLink = {
          url: "https://www.github.com/Jac21"
        };

        $scope.fabButtonLinks = {
          email:
            "mailto:mail@jeremycantu.com?subject=Jeremy Cantu's Portfolio Inquiry&body=Let's talk!",
          file: "https://jac21.github.io",
          github: "https://www.github.com/Jac21",
          linkedin: "https://www.linkedin.com/in/jeremycantu"
        };

        // utility function to add active css class to target element
        $scope.activate = function(event) {
          $(event.target).addClass("active"); // eslint-disable-line no-undef
        };

        // utility function to set viewport to the top of the page
        // on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };

        // initialize FAB
        var elem = document.querySelector(".fixed-action-btn");

        var instance = M.FloatingActionButton.init(elem, {
          direction: "left",
          hoverEnabled: false
        });

        // initialize materialbox
        var elem = document.querySelectorAll(".materialboxed");
        var instance = M.Materialbox.init(elem, {
          inDuration: 275,
          outDuration: 200
        });

        // initialize blog container wrapper style
        var secondaryThemeHexCode = "#ffab40";

        if (document.querySelector("div.container.blog-container")) {
          document.body.parentNode.style.boxShadow =
            "0 0 0 5px " + secondaryThemeHexCode + " inset";
        } else {
          document.body.parentNode.style.boxShadow = "";
        }
      }
    ]);
})();

(function() {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioApp")
    .controller("PhotographerController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "photographer";

        // page specific objects
        $scope.photographerHeadshot = {
          url: "dist/images/photographer/headshot-photo.jpg",
          alt: "photographer headshot"
        };

        $scope.photographerHeaderLink = {
          url: "https://www.jcantuphotography.com/"
        };

        // image data array
        $scope.images = [
          {
            caption: "Taken at Avila in Spain",
            url: "dist/images/photographer/photos/DSC_4705.JPG",
            alt: "Avila in Spain"
          },
          {
            caption: "Taken in Martindale, Texas",
            url: "dist/images/photographer/photos/DSC_4110.JPG",
            alt: "Martindale, Texas"
          },
          {
            caption: "Taken at the Buen Retiro Park in Madrid, Spain",
            url: "dist/images/photographer/photos/DSC_4544.JPG",
            alt: "Monument to Alfonso XII in Madrid, Spain"
          },
          {
            caption: "Taken at Castillo San Crist√≥bal in San Juan, Puerto Rico",
            url: "dist/images/photographer/photos/DSC_1201.jpg",
            alt: "Pier in San Juan, Puerto Rico"
          },
          {
            caption:
              "Taken at the Hamilton Pool Preserve near Dripping Springs, Texas",
            url: "dist/images/photographer/photos/DSC_0358.JPG",
            alt: "Hamilton Pool Waterfall near Dripping Springs, Texas"
          },
          {
            caption:
              "Taken at the Mohawk in Austin, Texas (Band: Anamanaguchi)",
            url: "dist/images/photographer/photos/DSC_0631.jpg",
            alt: "Anamanaguchi at the Mohawk in Austin, Texas"
          }
        ];

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // utility function to set viewport to the top of the page on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };
      }
    ]);
})();

(function() {
  "use strict";

  var app = angular.module("responsive-images", []); // eslint-disable-line no-undef

  // UI element directive
  app.directive("responsiveImage", function($timeout) {
    return {
      restrict: "E",
      templateUrl: "responsive-image.html",
      // https://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished
      link: function(scope, element, attr) {
        if (scope.$last === true) {
          $timeout(function() {
            // initialize materialbox
            var elem = document.querySelectorAll(".materialboxed");
            var instance = M.Materialbox.init(elem, {
              inDuration: 275,
              outDuration: 200
            });
          });
        }
      }
    };
  });
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
