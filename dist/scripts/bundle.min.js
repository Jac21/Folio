// wrap in an IIFE to remove variables from global scope
(function() {
  "use strict";
  
  angular
    .module("folioApp", ["ui.router", "responsive-images"]) // eslint-disable-line no-undef
    .config(function(
      $stateProvider,
      $urlRouterProvider,
      $compileProvider,
      $locationProvider
    ) {
      $compileProvider.debugInfoEnabled(false);

      $stateProvider
        .state("developer", {
          url: "/developer",
          templateUrl: "templates/main/developer.html",
          controller: "DeveloperController"
        })
        .state("photographer", {
          url: "/photographer",
          templateUrl: "templates/main/photographer.html",
          controller: "PhotographerController"
        })
        .state("vera-photoshoot", {
          url: "/vera-photoshoot",
          templateUrl: "templates/photoshoots/vera-photoshoot.html",
          controller: "PhotographerController"
        })
        .state("skillset", {
          url: "/skillset",
          templateUrl: "templates/projects/skillset.html",
          controller: "DeveloperController"
        })
        .state("etude", {
          url: "/etude",
          templateUrl: "templates/projects/etude.html",
          controller: "DeveloperController"
        })
        .state("reponotes", {
          url: "/reponotes",
          templateUrl: "templates/projects/reponotes.html",
          controller: "DeveloperController"
        })
        .state("tfstoolset", {
          url: "/tfstoolset",
          templateUrl: "templates/projects/tfstoolset.html",
          controller: "DeveloperController"
        });

      $urlRouterProvider.otherwise("/developer");
    });
})();

(function() {
  "use strict";
  
  angular // eslint-disable-line no-undef
    .module("folioApp")
    .controller("DeveloperController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "developer";

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // page specific objects
        $scope.developerHeadshot = {
          url: "https://avatars3.githubusercontent.com/u/1449455?s=460&v=4",
          alt: "developer headshot"
        };

        $scope.softwareHeaderLink = {
          url: "https://www.github.com/Jac21"
        };

        $scope.fabButtonLinks = {
          email:
            "mailto:mail@jeremycantu.com?subject=Jeremy Cantu's Portfolio Inquiry&body=Let's talk!",
          file: "https://jac21.github.io",
          github: "https://www.github.com/Jac21",
          linkedin: "https://www.linkedin.com/in/jeremycantu"
        };

        // utility function to add active css class to target element
        $scope.activate = function(event) {
          $(event.target).addClass("active"); // eslint-disable-line no-undef
        };

        // utility function to set viewport to the top of the page
        // on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };

        // initialize FAB
        var elem = document.querySelector(".fixed-action-btn");

        var instance = M.FloatingActionButton.init(elem, {
          direction: "left",
          hoverEnabled: false
        });
      }
    ]);
})();

(function() {
  "use strict";

  angular // eslint-disable-line no-undef
    .module("folioApp")
    .controller("PhotographerController", [
      "$scope",
      "$location",
      "$anchorScroll",
      function($scope, $location, $anchorScroll) {
        // set page class
        $scope.pageClass = "photographer";

        // page specific objects
        $scope.photographerHeadshot = {
          url: "dist/images/photographer/headshot-photo.jpg",
          alt: "photographer headshot"
        };

        $scope.photographerHeaderLink = {
          url: "https://www.jcantuphotography.com/"
        };

        // image data array
        $scope.images = [
          {
            caption: "Taken at Avila in Spain",
            url: "dist/images/photographer/photos/DSC_4705.JPG",
            alt: "Avila in Spain"
          },
          {
            caption: "Taken in Martindale, Texas",
            url: "dist/images/photographer/photos/DSC_4110.JPG",
            alt: "Martindale, Texas"
          },
          {
            caption: "Taken at the Buen Retiro Park in Madrid, Spain",
            url: "dist/images/photographer/photos/DSC_4544.JPG",
            alt: "Monument to Alfonso XII in Madrid, Spain"
          },
          {
            caption: "Taken at Castillo San Crist√≥bal in San Juan, Puerto Rico",
            url: "dist/images/photographer/photos/DSC_1201.jpg",
            alt: "Pier in San Juan, Puerto Rico"
          },
          {
            caption:
              "Taken at the Hamilton Pool Preserve near Dripping Springs, Texas",
            url: "dist/images/photographer/photos/DSC_0358.JPG",
            alt: "Hamilton Pool Waterfall near Dripping Springs, Texas"
          },
          {
            caption:
              "Taken at the Mohawk in Austin, Texas (Band: Anamanaguchi)",
            url: "dist/images/photographer/photos/DSC_0631.jpg",
            alt: "Anamanaguchi at the Mohawk in Austin, Texas"
          }
        ];

        // utility function for linking between views
        $scope.go = function(path) {
          $location.path(path);
        };

        // utility function to set viewport to the top of the page on element click
        $scope.backToTop = function() {
          $anchorScroll();
        };
      }
    ]);
})();

(function() {
  "use strict";

  var app = angular.module("responsive-images", []); // eslint-disable-line no-undef

  // UI element directive
  app.directive("responsiveImage", function($timeout) {
    return {
      restrict: "E",
      templateUrl: "responsive-image.html",
      // https://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished
      link: function(scope, element, attr) {
        if (scope.$last === true) {
          $timeout(function() {
            // initialize materialbox
            var elem = document.querySelectorAll(".materialboxed");
            var instance = M.Materialbox.init(elem, {
              inDuration: 275,
              outDuration: 200
            });
          });
        }
      }
    };
  });
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIkRldmVsb3BlckNvbnRyb2xsZXIuanMiLCJQaG90b2dyYXBoZXJDb250cm9sbGVyLmpzIiwicmVzcG9uc2l2ZUltYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHdyYXAgaW4gYW4gSUlGRSB0byByZW1vdmUgdmFyaWFibGVzIGZyb20gZ2xvYmFsIHNjb3BlXHJcbihmdW5jdGlvbigpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuICBcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKFwiZm9saW9BcHBcIiwgW1widWkucm91dGVyXCIsIFwicmVzcG9uc2l2ZS1pbWFnZXNcIl0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuICAgIC5jb25maWcoZnVuY3Rpb24oXHJcbiAgICAgICRzdGF0ZVByb3ZpZGVyLFxyXG4gICAgICAkdXJsUm91dGVyUHJvdmlkZXIsXHJcbiAgICAgICRjb21waWxlUHJvdmlkZXIsXHJcbiAgICAgICRsb2NhdGlvblByb3ZpZGVyXHJcbiAgICApIHtcclxuICAgICAgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKTtcclxuXHJcbiAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgLnN0YXRlKFwiZGV2ZWxvcGVyXCIsIHtcclxuICAgICAgICAgIHVybDogXCIvZGV2ZWxvcGVyXCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvbWFpbi9kZXZlbG9wZXIuaHRtbFwiLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogXCJEZXZlbG9wZXJDb250cm9sbGVyXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcInBob3RvZ3JhcGhlclwiLCB7XHJcbiAgICAgICAgICB1cmw6IFwiL3Bob3RvZ3JhcGhlclwiLFxyXG4gICAgICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL21haW4vcGhvdG9ncmFwaGVyLmh0bWxcIixcclxuICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUGhvdG9ncmFwaGVyQ29udHJvbGxlclwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJ2ZXJhLXBob3Rvc2hvb3RcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi92ZXJhLXBob3Rvc2hvb3RcIixcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9waG90b3Nob290cy92ZXJhLXBob3Rvc2hvb3QuaHRtbFwiLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogXCJQaG90b2dyYXBoZXJDb250cm9sbGVyXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcInNraWxsc2V0XCIsIHtcclxuICAgICAgICAgIHVybDogXCIvc2tpbGxzZXRcIixcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9wcm9qZWN0cy9za2lsbHNldC5odG1sXCIsXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBcIkRldmVsb3BlckNvbnRyb2xsZXJcIlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiZXR1ZGVcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi9ldHVkZVwiLFxyXG4gICAgICAgICAgdGVtcGxhdGVVcmw6IFwidGVtcGxhdGVzL3Byb2plY3RzL2V0dWRlLmh0bWxcIixcclxuICAgICAgICAgIGNvbnRyb2xsZXI6IFwiRGV2ZWxvcGVyQ29udHJvbGxlclwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoXCJyZXBvbm90ZXNcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi9yZXBvbm90ZXNcIixcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInRlbXBsYXRlcy9wcm9qZWN0cy9yZXBvbm90ZXMuaHRtbFwiLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogXCJEZXZlbG9wZXJDb250cm9sbGVyXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcInRmc3Rvb2xzZXRcIiwge1xyXG4gICAgICAgICAgdXJsOiBcIi90ZnN0b29sc2V0XCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ0ZW1wbGF0ZXMvcHJvamVjdHMvdGZzdG9vbHNldC5odG1sXCIsXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBcIkRldmVsb3BlckNvbnRyb2xsZXJcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9kZXZlbG9wZXJcIik7XHJcbiAgICB9KTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG4gIFxyXG4gIGFuZ3VsYXIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG4gICAgLm1vZHVsZShcImZvbGlvQXBwXCIpXHJcbiAgICAuY29udHJvbGxlcihcIkRldmVsb3BlckNvbnRyb2xsZXJcIiwgW1xyXG4gICAgICBcIiRzY29wZVwiLFxyXG4gICAgICBcIiRsb2NhdGlvblwiLFxyXG4gICAgICBcIiRhbmNob3JTY3JvbGxcIixcclxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHtcclxuICAgICAgICAvLyBzZXQgcGFnZSBjbGFzc1xyXG4gICAgICAgICRzY29wZS5wYWdlQ2xhc3MgPSBcImRldmVsb3BlclwiO1xyXG5cclxuICAgICAgICAvLyB1dGlsaXR5IGZ1bmN0aW9uIGZvciBsaW5raW5nIGJldHdlZW4gdmlld3NcclxuICAgICAgICAkc2NvcGUuZ28gPSBmdW5jdGlvbihwYXRoKSB7XHJcbiAgICAgICAgICAkbG9jYXRpb24ucGF0aChwYXRoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBwYWdlIHNwZWNpZmljIG9iamVjdHNcclxuICAgICAgICAkc2NvcGUuZGV2ZWxvcGVySGVhZHNob3QgPSB7XHJcbiAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9hdmF0YXJzMy5naXRodWJ1c2VyY29udGVudC5jb20vdS8xNDQ5NDU1P3M9NDYwJnY9NFwiLFxyXG4gICAgICAgICAgYWx0OiBcImRldmVsb3BlciBoZWFkc2hvdFwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNvZnR3YXJlSGVhZGVyTGluayA9IHtcclxuICAgICAgICAgIHVybDogXCJodHRwczovL3d3dy5naXRodWIuY29tL0phYzIxXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZmFiQnV0dG9uTGlua3MgPSB7XHJcbiAgICAgICAgICBlbWFpbDpcclxuICAgICAgICAgICAgXCJtYWlsdG86bWFpbEBqZXJlbXljYW50dS5jb20/c3ViamVjdD1KZXJlbXkgQ2FudHUncyBQb3J0Zm9saW8gSW5xdWlyeSZib2R5PUxldCdzIHRhbGshXCIsXHJcbiAgICAgICAgICBmaWxlOiBcImh0dHBzOi8vamFjMjEuZ2l0aHViLmlvXCIsXHJcbiAgICAgICAgICBnaXRodWI6IFwiaHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9KYWMyMVwiLFxyXG4gICAgICAgICAgbGlua2VkaW46IFwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2plcmVteWNhbnR1XCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyB1dGlsaXR5IGZ1bmN0aW9uIHRvIGFkZCBhY3RpdmUgY3NzIGNsYXNzIHRvIHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgJHNjb3BlLmFjdGl2YXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5hZGRDbGFzcyhcImFjdGl2ZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHV0aWxpdHkgZnVuY3Rpb24gdG8gc2V0IHZpZXdwb3J0IHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcclxuICAgICAgICAvLyBvbiBlbGVtZW50IGNsaWNrXHJcbiAgICAgICAgJHNjb3BlLmJhY2tUb1RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGluaXRpYWxpemUgRkFCXHJcbiAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZpeGVkLWFjdGlvbi1idG5cIik7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IE0uRmxvYXRpbmdBY3Rpb25CdXR0b24uaW5pdChlbGVtLCB7XHJcbiAgICAgICAgICBkaXJlY3Rpb246IFwibGVmdFwiLFxyXG4gICAgICAgICAgaG92ZXJFbmFibGVkOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICBdKTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICBhbmd1bGFyIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuICAgIC5tb2R1bGUoXCJmb2xpb0FwcFwiKVxyXG4gICAgLmNvbnRyb2xsZXIoXCJQaG90b2dyYXBoZXJDb250cm9sbGVyXCIsIFtcclxuICAgICAgXCIkc2NvcGVcIixcclxuICAgICAgXCIkbG9jYXRpb25cIixcclxuICAgICAgXCIkYW5jaG9yU2Nyb2xsXCIsXHJcbiAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCAkYW5jaG9yU2Nyb2xsKSB7XHJcbiAgICAgICAgLy8gc2V0IHBhZ2UgY2xhc3NcclxuICAgICAgICAkc2NvcGUucGFnZUNsYXNzID0gXCJwaG90b2dyYXBoZXJcIjtcclxuXHJcbiAgICAgICAgLy8gcGFnZSBzcGVjaWZpYyBvYmplY3RzXHJcbiAgICAgICAgJHNjb3BlLnBob3RvZ3JhcGhlckhlYWRzaG90ID0ge1xyXG4gICAgICAgICAgdXJsOiBcImRpc3QvaW1hZ2VzL3Bob3RvZ3JhcGhlci9oZWFkc2hvdC1waG90by5qcGdcIixcclxuICAgICAgICAgIGFsdDogXCJwaG90b2dyYXBoZXIgaGVhZHNob3RcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5waG90b2dyYXBoZXJIZWFkZXJMaW5rID0ge1xyXG4gICAgICAgICAgdXJsOiBcImh0dHBzOi8vd3d3LmpjYW50dXBob3RvZ3JhcGh5LmNvbS9cIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGltYWdlIGRhdGEgYXJyYXlcclxuICAgICAgICAkc2NvcGUuaW1hZ2VzID0gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjYXB0aW9uOiBcIlRha2VuIGF0IEF2aWxhIGluIFNwYWluXCIsXHJcbiAgICAgICAgICAgIHVybDogXCJkaXN0L2ltYWdlcy9waG90b2dyYXBoZXIvcGhvdG9zL0RTQ180NzA1LkpQR1wiLFxyXG4gICAgICAgICAgICBhbHQ6IFwiQXZpbGEgaW4gU3BhaW5cIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogXCJUYWtlbiBpbiBNYXJ0aW5kYWxlLCBUZXhhc1wiLFxyXG4gICAgICAgICAgICB1cmw6IFwiZGlzdC9pbWFnZXMvcGhvdG9ncmFwaGVyL3Bob3Rvcy9EU0NfNDExMC5KUEdcIixcclxuICAgICAgICAgICAgYWx0OiBcIk1hcnRpbmRhbGUsIFRleGFzXCJcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhcHRpb246IFwiVGFrZW4gYXQgdGhlIEJ1ZW4gUmV0aXJvIFBhcmsgaW4gTWFkcmlkLCBTcGFpblwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiZGlzdC9pbWFnZXMvcGhvdG9ncmFwaGVyL3Bob3Rvcy9EU0NfNDU0NC5KUEdcIixcclxuICAgICAgICAgICAgYWx0OiBcIk1vbnVtZW50IHRvIEFsZm9uc28gWElJIGluIE1hZHJpZCwgU3BhaW5cIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogXCJUYWtlbiBhdCBDYXN0aWxsbyBTYW4gQ3Jpc3TDs2JhbCBpbiBTYW4gSnVhbiwgUHVlcnRvIFJpY29cIixcclxuICAgICAgICAgICAgdXJsOiBcImRpc3QvaW1hZ2VzL3Bob3RvZ3JhcGhlci9waG90b3MvRFNDXzEyMDEuanBnXCIsXHJcbiAgICAgICAgICAgIGFsdDogXCJQaWVyIGluIFNhbiBKdWFuLCBQdWVydG8gUmljb1wiXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjYXB0aW9uOlxyXG4gICAgICAgICAgICAgIFwiVGFrZW4gYXQgdGhlIEhhbWlsdG9uIFBvb2wgUHJlc2VydmUgbmVhciBEcmlwcGluZyBTcHJpbmdzLCBUZXhhc1wiLFxyXG4gICAgICAgICAgICB1cmw6IFwiZGlzdC9pbWFnZXMvcGhvdG9ncmFwaGVyL3Bob3Rvcy9EU0NfMDM1OC5KUEdcIixcclxuICAgICAgICAgICAgYWx0OiBcIkhhbWlsdG9uIFBvb2wgV2F0ZXJmYWxsIG5lYXIgRHJpcHBpbmcgU3ByaW5ncywgVGV4YXNcIlxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjpcclxuICAgICAgICAgICAgICBcIlRha2VuIGF0IHRoZSBNb2hhd2sgaW4gQXVzdGluLCBUZXhhcyAoQmFuZDogQW5hbWFuYWd1Y2hpKVwiLFxyXG4gICAgICAgICAgICB1cmw6IFwiZGlzdC9pbWFnZXMvcGhvdG9ncmFwaGVyL3Bob3Rvcy9EU0NfMDYzMS5qcGdcIixcclxuICAgICAgICAgICAgYWx0OiBcIkFuYW1hbmFndWNoaSBhdCB0aGUgTW9oYXdrIGluIEF1c3RpbiwgVGV4YXNcIlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIC8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGxpbmtpbmcgYmV0d2VlbiB2aWV3c1xyXG4gICAgICAgICRzY29wZS5nbyA9IGZ1bmN0aW9uKHBhdGgpIHtcclxuICAgICAgICAgICRsb2NhdGlvbi5wYXRoKHBhdGgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHV0aWxpdHkgZnVuY3Rpb24gdG8gc2V0IHZpZXdwb3J0IHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2Ugb24gZWxlbWVudCBjbGlja1xyXG4gICAgICAgICRzY29wZS5iYWNrVG9Ub3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICBdKTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJyZXNwb25zaXZlLWltYWdlc1wiLCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuXHJcbiAgLy8gVUkgZWxlbWVudCBkaXJlY3RpdmVcclxuICBhcHAuZGlyZWN0aXZlKFwicmVzcG9uc2l2ZUltYWdlXCIsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogXCJFXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcInJlc3BvbnNpdmUtaW1hZ2UuaHRtbFwiLFxyXG4gICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNTIwNzc4OC9jYWxsaW5nLWEtZnVuY3Rpb24td2hlbi1uZy1yZXBlYXQtaGFzLWZpbmlzaGVkXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgICAgaWYgKHNjb3BlLiRsYXN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSBtYXRlcmlhbGJveFxyXG4gICAgICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWF0ZXJpYWxib3hlZFwiKTtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gTS5NYXRlcmlhbGJveC5pbml0KGVsZW0sIHtcclxuICAgICAgICAgICAgICBpbkR1cmF0aW9uOiAyNzUsXHJcbiAgICAgICAgICAgICAgb3V0RHVyYXRpb246IDIwMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9KTtcclxufSkoKTtcclxuIl19
